#!/usr/bin/env perl6
#
use Test;
use lib 'lib';
use Pakku::Spec;
use Pakku::Grammar::Cmd;

my @tests = (
  "" =>
    ${:cmd("help"), :help(${:cmd("")})},
  "add Spec" =>
    ${:add(${:what($["Spec"])}), :cmd("add")},
  "add deps" =>
    ${:add(${:what($["deps"])}), :cmd("add")},
  "add deps Spec" =>
    ${:add(${:deps, :what($["Spec"])}), :cmd("add")},
  "add build Spec" =>
    ${:add(${:build, :what($["Spec"])}), :cmd("add")},
  "add test Spec" =>
    ${:add(${:what($["Spec"]), :test}), :cmd("add")},
  "add force Spec" =>
    ${:add(${:force, :what($["Spec"])}), :cmd("add")},
  "add nodeps Spec" =>
    ${:add(${:!deps, :what($["Spec"])}), :cmd("add")},
  "add nobuild Spec" =>
    ${:add(${:!build, :what($["Spec"])}), :cmd("add")},
  "add notest Spec" =>
    ${:add(${:what($["Spec"]), :!test}), :cmd("add")},
  "add Spec1 Spec2" =>
    ${:add(${:what($["Spec1", "Spec2"])}), :cmd("add")},
  "add noforce Spec" =>
    ${:add(${:!force, :what($["Spec"])}), :cmd("add")},
  "add depsforce Spec" =>
    ${:add(${:what($["depsforce", "Spec"])}), :cmd("add")},
  "add deps force Spec" =>
    ${:add(${:deps, :force, :what($["Spec"])}), :cmd("add")},
  "add into notrepo Spec" =>
    ${:add(${:what($["into", "notrepo", "Spec"])}), :cmd("add")},
  "v3 add force Spec" =>
    ${:add(${:force, :what($["Spec"])}), :cmd("add"), :pakku(${:verbose(3)})},
  "v 3 add deps Spec" =>
    ${:add(${:deps, :what($["Spec"])}), :cmd("add"), :pakku(${:verbose(3)})},
  "pretty v3 add force Spec" =>
    ${:add(${:force, :what($["Spec"])}), :cmd("add"), :pakku(${:pretty, :verbose(3)})},
  "remove Spec1 Spec2" =>
    ${:cmd("remove"), :remove(${:what($["Spec1", "Spec2"])})},
  "l" =>
    ${:cmd("list")},
  "list" =>
    ${:cmd("list")},
  "list local" =>
    ${:cmd("list"), :list(${:local})},
  "list remote" =>
    ${:cmd("list"), :list(${:remote})},
  "list local Spec" =>
    ${:cmd("list"), :list(${:local, :what($["Spec"])})},
  "list remote Spec1 Spec2" =>
    ${:cmd("list"), :list(${:remote, :what($["Spec1", "Spec2"])})},
  "list local details" =>
    ${:cmd("list"), :list(${:details, :local})},
  "list remote details Spec" =>
    ${:cmd("list"), :list(${:details, :remote, :what($["Spec"])})},
  "list remote details Spec" =>
    ${:cmd("list"), :list(${:details, :remote, :what($["Spec"])})},
  "list Spec" =>
    ${:cmd("list"), :list(${:what($["Spec"])})},
  "add" =>
    ${:cmd("help"), :help(${:cmd("add")})},
  "help" =>
    ${:cmd("help"), :help(${:cmd("")})},
  "help add" =>
    ${:cmd("help"), :help(${:cmd("add")})},
  "a" =>
    ${:cmd("help"), :help(${:cmd("add")})},
  "notcmd" =>
    ${:cmd("help"), :help(${:cmd("")})},
  "help notcmd" =>
    ${:cmd("help"), :help(${:cmd("")})},
);

#plan 30;


for @tests {

  my $cmd      = .key;
  my $expected = .value;

  my $parser  = Pakku::Grammar::Cmd;
  my $actions = Pakku::Grammar::Cmd::Actions;
  my $got     = $parser.parse( $cmd, :$actions ).ast;


  $got<pakku>:delete unless $got<pakku>;
  $got<list>:delete  unless $got<list>;

  $got .= deepmap( -> $_ { $_ ~~ Pakku::Spec ?? .short-name !! $_ } );

  is-deeply  $got, $expected, $cmd;
}

done-testing;
